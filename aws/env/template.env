# Infrastructure Env Vars TEMPLATE
#
# DO NOT MODIFY THIS FILE


###################################################################################
## GENERAL info

# AWS Environment Name (Staging, Preprod, Production,...)
export ENVIRONMENT_NAME=

# Domain name where Nightfall is deployed
export DOMAIN_NAME=

# AWS region where Nightfall is deployed
export REGION=
export CDK_DEFAULT_REGION=${REGION}

## AWS Infrastructure Information

# AWS VPC where Nightfall is deployed
export VPC_ID=

# AWS Backend subnets
export BACK1_SUBNET_ID=
export BACK2_SUBNET_ID=
export BACK3_SUBNET_ID=

# AWS IP address for external instance running blockchain
export EC2_GETH_IP=

# AWS Elastic File System ID
export EFS_ID=
# AWS Elastic File System IP
export EFS_IP=
# AWS Elastic File System  Security Group ID
export EFS_SG_ID=
# AWS Elastic File System DNS
export EFS_DNS=${EFS_ID}.efs.${REGION}.amazonaws.com
# AWS Elastic File Mount point
export EFS_MOUNT_POINT=~/efs-${ENVIRONMENT_NAME}

# AWS VPN IP
export VPN_IP_SEED=

# AWS ECR Repositories to store Nightfall containers
export ECR_REPO=${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com

# AWS Document DB ID
export MONGO_ID=
# AWD Document DB URL
export MONGO_URL=

# AWS DynamoDB tables ID
export DYNAMODB_DOCUMENTDB_TABLE=PNF3_DocumentDB_${ENVIRONMENT_NAME,,}
export DYNAMODB_WS_TABLE=PNF3_Connections_WS_${ENVIRONMENT_NAME,,}

# AWS API GW endpoint
export API_WS_SEND_ENDPOINT=
export API_HTTPS_SEND_ENDPOINT=

# AWS S3 Buckets URI
export S3_BUCKET_WALLET=
export S3_BUCKET_DEPLOYER=
export S3_BUCKET_CLOUDFRONT=

###################################################################################

## Container Configuration Variables
## NIGHTFALL_LEGACY configures whether or not client and optimist are split in multiple containers
##  - true builds a single container for client and optimist
##  - false splits client and optimist into multiple containers 
export NIGHTFALL_LEGACY=false
export NIGHTFALL_HASH_TYPE=poseidon-go

# Blockchain/Ganache/Geth

export BLOCKCHAIN_SERVICE=web3-ws
export BLOCKCHAIN_WS_HOST=${BLOCKCHAIN_SERVICE}.${DOMAIN_NAME}
export BLOCKCHAIN_PORT=8546
export BLOCKCHAIN_RPC_SERVICE=web3-rpc
export BLOCKCHAIN_RPC_HOST=${BLOCKCHAIN_RPC_SERVICE}.${DOMAIN_NAME}
export BLOCKCHAIN_RPC_PORT=8545
export BLOCKCHAIN_SERVICE_ALB='internal'
export BLOCKCHAIN_CPU_COUNT=16

# Optimist

# Configure Number of Optimist containers to deploy.
export OPTIMIST_N=1

export OPTIMIST_WS_SERVICE=optimist-ws
export OPTIMIST_HTTP_SERVICE=optimist-api
export OPTIMIST_HOST=${OPTIMIST_WS_SERVICE}.${DOMAIN_NAME}
export OPTIMIST_HTTP_HOST=${OPTIMIST_HTTP_SERVICE}.${DOMAIN_NAME}
export OPTIMIST_WS_PORT=8080
export OPTIMIST_HTTP_PORT=80
export OPTIMIST_LOG_LEVEL=debug
export OPTIMIST_LOG_HTTP_PAYLOAD_ENABLED='true'
export OPTIMIST_LOG_HTTP_FULL_DATA='false'
export OPTIMIST_WS_SERVICE_ALB='internal'
export OPTIMIST_HTTP_SERVICE_ALB='internal'

# Configure maximum block size in bytes. Whenever there are
# pending transactions with aggregated size larger than this
# threshold, the optimist will generate a new block

export MAX_BLOCK_SIZE=50000

# Configure optimist to allow to challenger blocks. Set to true/false
export OPTIMIST_IS_CHALLENGER=true
export OPTIMIST_AUTOSTART_RETRIES=10000 

# Adversarial optimist Parameters.

# Configure optimist to generate bad blocks. 
#  This functionality is only for testing and should be set to 0 in production environments 
#  To enable functionality, set value to 1
#  If multiple optimistst are defined in OPTIMIST_N, then one can specify for each optimist
#    if the adversary functionality is enabled. For example, if 2 optimists are defined,
#    and first optimist is an adversary and second is not, set OPTIMIST_IS_ADVERSARY='1,0'
export OPTIMIST_IS_ADVERSARY=0

#  Control bad block generation automarically. Alternative is to use endpoints
#    Set to y if we want this functionality enabled and leave empty if not
#    This variable controls the behavior of all adversary optimists
#    If optimist is not configured as an adversary, variable doesnt have an impact
export OPTIMIST_ADVERSARY_CONTROLLER_ENABLED=y

#  Bad block period. For example, setting this to 3, the adversary optimist will
#  generate 1 incorrect out of 3
#  Only meaningful is OPTIMIST_ADVERSARY_CONTROLLER_ENABLED is enabled
export OPTIMIST_ADVERSARY_BAD_BLOCK_GENERATION_PERIOD=1

#  Bad block generated sequence. One can configure the type of bad blocks being generated
#  Options include IncorrectLeafCount, DuplicateCommitment, DuplicateNullifier and IncorrectTreeRoot. 
#    Any other value will be taken as valid block. 
#    The bad block sequence will be restarted once it reaches the end
#    Bad block types should be separated with commas, and no space between them.
#  Only meaningful is OPTIMIST_ADVERSARY_CONTROLLER_ENABLED is enabled
export OPTIMIST_ADVERSARY_BAD_BLOCK_SEQUENCE='IncorrectLeafCount'

# Enable optimist to verify self proposed blocks
export OPTIMIST_FULL_VERIFICATION_SELF_PROPOSED_BLOCKS=false 


## OPTIMIST TX WORKER parameters

#  Number of tasks running in parallel under load balancer
export OPTIMIST_TX_WORKER_N=1

export OPTIMIST_TX_WORKER_SERVICE=optimist-txw
export OPTIMIST_TX_WORKER_HOST=${OPTIMIST_TX_WORKER_SERVICE}.${DOMAIN_NAME}
export OPTIMIST_TX_WORKER_PORT=80
export OPTIMIST_TX_WORKER_SERVICE_ALB='internal'
#  Maximum number of CPUs to use for TX Worker service
export OPTIMIST_TX_WORKER_CPU_COUNT=2

export OPTIMIST_BA_WORKER_SERVICE=optimist-baw
export OPTIMIST_BA_WORKER_HOST=${OPTIMIST_BA_WORKER_SERVICE}.${DOMAIN_NAME}
export OPTIMIST_BA_WORKER_PORT=80
export OPTIMIST_BA_WORKER_SERVICE_ALB='internal'
export OPTIMIST_BA_WORKER_WS_SERVICE=optimist-wsbaw
export OPTIMIST_BA_WORKER_WS_PORT=8080
export OPTIMIST_BA_WORKER_WS_HOST=${OPTIMIST_BA_WORKER_WS_SERVICE}.${DOMAIN_NAME}
export OPTIMIST_BA_WORKER_WS_SERVICE_ALB='internal'

export OPTIMIST_BP_WORKER_SERVICE=optimist-bpw
export OPTIMIST_BP_WORKER_HOST=${OPTIMIST_BP_WORKER_SERVICE}.${DOMAIN_NAME}
export OPTIMIST_BP_WORKER_PORT=80
export OPTIMIST_BP_WORKER_SERVICE_ALB='internal'
export OPTIMIST_BP_WORKER_WS_SERVICE=optimist-wsbpw
export OPTIMIST_BP_WORKER_WS_HOST=${OPTIMIST_BP_WORKER_WS_SERVICE}.${DOMAIN_NAME}
export OPTIMIST_BP_WORKER_WS_PORT=8080
export OPTIMIST_BP_WORKER_WS_SERVICE_ALB='internal'

# Proposer

# Define number of proposers  
export PROPOSER_N=1

export PROPOSER_PORT=8080
export PROPOSER_SERVICE=proposer
export PROPOSER_HOST=${PROPOSER_SERVICE}.${DOMAIN_NAME}
export PROPOSER_SERVICE_ALB='external'
export PROPOSER_LOG_LEVEL=debug
export PROPOSER_LOG_HTTP_PAYLOAD_ENABLED='true'
export PROPOSER_LOG_HTTP_FULL_DATA='false'

# Time to wait between consecutive checks to change proposer
export PROPOSER_TIMER_CHANGE_PROPOSER_SECOND=30
export PROPOSER_MAX_ROTATE_TIMES=2

# Enables ability to turn on and off proposers. This functionality is only
#  thought for testing. For production environments, it should be left empty.
#  To enable turning on/off proposers, only random mode is supported. So, 
#    set PROPOSER_DOWNTIME_AT=random
export PROPOSER_DOWNTIME_AT=

#  Random downtime enables to configure proposer downtime per hour.
#    PROPOSER_DOWNTIME_LENGTH_MINUTES sets the number of minutes in an hour
#      the proposer will be unavailable. The reference time is random.
export PROPOSER_DOWNTIME_LENGTH_MINUTES=55

# Configures maximum time a proposer can wait to generate an incomplete block
#  Setting time to 0 means that proposer will only generate full blocks.
export PROPOSER_MAX_BLOCK_PERIOD_MILIS=60000

#######  START CLIENT SECTION
# Client

# Number of clients + circom workers to deploy
export CLIENT_N=1

export CLIENT_PORT=80
export CLIENT_SERVICE=client
export CLIENT_HOST=${CLIENT_SERVICE}.${DOMAIN_NAME}
export CLIENT_SERVICE_ALB='internal'
export CLIENT_LOG_LEVEL=debug
export CLIENT_AUTOSTART_RETRIES=1000
export CLIENT_LOG_HTTP_PAYLOAD_ENABLED='true'
export CLIENT_LOG_HTTP_FULL_DATA='false'
export CLIENT_PROTOCOL='https://'
# Client could be configured as adversary as well to allow generation of bad blocks
#   This functionality is not yet ready
export CLIENT_IS_ADVERSARY=0
export ENABLE_QUEUE=
export CLIENT_COMMITMENTS_DB=${COMMITMENTS_DB}

export CLIENT_TX_WORKER_N=1
export CLIENT_TX_WORKER_PORT=80
export CLIENT_TX_WORKER_SERVICE=client-txw
export CLIENT_TX_WORKER_HOST=${CLIENT_TX_WORKER_SERVICE}.${DOMAIN_NAME}
export CLIENT_TX_WORKER_SERVICE_ALB='external'
export CLIENT_TX_WORKER_AUTOSTART_RETRIES=1000
export CLIENT_TX_WORKER_BENCHMARK_ENABLE=true
export CLIENT_TX_WORKER_PROTOCOL='https://'
export CLIENT_TX_WORKER_CPU_COUNT=1 

export CLIENT_AUX_WORKER_N=1
export CLIENT_AUX_WORKER_PORT=80
export CLIENT_AUX_WORKER_SERVICE=client-auxw
export CLIENT_AUX_WORKER_HOST=${CLIENT_AUX_WORKER_SERVICE}.${DOMAIN_NAME}
export CLIENT_AUX_WORKER_SERVICE_ALB='external'
export CLIENT_AUX_WORKER_AUTOSTART_RETRIES=1000
export CLIENT_AUX_WORKER_BENCHMARK_ENABLE=true
export CLIENT_AUX_WORKER_PROTOCOL='https://'
export CLIENT_AUX_WORKER_CPU_COUNT=1 

export CLIENT_BP_WORKER_PORT=80
export CLIENT_BP_WORKER_SERVICE=client-bpw
export CLIENT_BP_WORKER_HOST=${CLIENT_BP_WORKER_SERVICE}.${DOMAIN_NAME}
export CLIENT_BP_WORKER_SERVICE_ALB='external'
export CLIENT_BP_WORKER_AUTOSTART_RETRIES=1000
export CLIENT_BP_WORKER_BENCHMARK_ENABLE=true
export CLIENT_BP_WORKER_PROTOCOL='https://'

# Circom Worker
export CIRCOM_WORKER_N=${CLIENT_TX_WORKER_N}
export CIRCOM_WORKER_PORT=80
export CIRCOM_WORKER_SERVICE=circom
export CIRCOM_WORKER_HOST=${CIRCOM_WORKER_SERVICE}.${DOMAIN_NAME}
export CIRCOM_WORKER_SERVICE_ALB='internal'
export CIRCOM_WORKER_LOG_LEVEL=debug
export CIRCOM_WORKER_CPU_COUNT=8
export CIRCOM_WORKER_LOG_HTTP_PAYLOAD_ENABLED='true'
export CIRCOM_WORKER_LOG_HTTP_FULL_DATA='false'
export CIRCOM_WORKER_PROVER_TYPE=rapidsnark

#######  END CLIENT SECTION

#######  START REGULATOR SECTION
# REGULATOR
export REGULATOR_N=1
export REGULATOR_PORT=80
export REGULATOR_SERVICE=regulator
export REGULATOR_HOST=${REGULATOR_SERVICE}.${DOMAIN_NAME}
export REGULATOR_SERVICE_ALB='external'
export REGULATOR_LOG_LEVEL=debug
export REGULATOR_AUTOSTART_RETRIES=1000
export REGULATOR_LOG_HTTP_PAYLOAD_ENABLED='true'
export REGULATOR_LOG_HTTP_FULL_DATA='false'
export REGULATOR_PROTOCOL='https://'
export REGULATOR_COMMITMENTS_DB=regulator_${COMMITMENTS_DB}

export REGULATOR_AUX_WORKER_N=1
export REGULATOR_AUX_WORKER_PORT=80
export REGULATOR_AUX_WORKER_SERVICE=regulator-auxw
export REGULATOR_AUX_WORKER_HOST=${REGULATOR_AUX_WORKER_SERVICE}.${DOMAIN_NAME}
export REGULATOR_AUX_WORKER_SERVICE_ALB='external'
export REGULATOR_AUX_WORKER_AUTOSTART_RETRIES=1000
export REGULATOR_AUX_WORKER_BENCHMARK_ENABLE=true
export REGULATOR_AUX_WORKER_PROTOCOL='https://'
export REGULATOR_AUX_WORKER_CPU_COUNT=1 

export REGULATOR_BP_WORKER_PORT=80
export REGULATOR_BP_WORKER_SERVICE=regulator-bpw
export REGULATOR_BP_WORKER_HOST=${REGULATOR_BP_WORKER_SERVICE}.${DOMAIN_NAME}
export REGULATOR_BP_WORKER_SERVICE_ALB='external'
export REGULATOR_BP_WORKER_AUTOSTART_RETRIES=1000
export REGULATOR_BP_WORKER_BENCHMARK_ENABLE=true
export REGULATOR_BP_WORKER_PROTOCOL='https://'

export REGULATOR_ZKP_PUBLIC_KEY=0xae979c4ee2e9d36dfc257396f71059e1c1bb76d37fcf3b61dc03b553db2de562

#######  END REGULATOR SECTION

# Web3
export GAS_MULTIPLIER=2
export GAS_PRICE=20000000000
export GAS_DEPLOYER=8000000
export GAS_USER=8000000
export GAS_CLIENT=8000000
export GAS_PROPOSER=8000000
export GAS_ESTIMATE_ENDPOINT=https://vqxy02tr5e.execute-api.us-east-2.amazonaws.com/production/estimateGas


# Deployer

export WORKER_LOG_LEVEL=info

# Configures where the deployer ethereum private key is retrieved.
#   if true, it will retrieve it from AWS param store.
#   Else, deployer will be propmted for one
export USE_AWS_PRIVATE_KEY=true

# Genesis block number for state contract. Providing the block where 
#   state contract is deployed reduces the syncing time
export STATE_GENESIS_BLOCK=

#  Upon deployment, contracts are transferred to a multisig. MULTISIG_SIGNATURE_THRESHOLD
#    configures the number of signatures requires in the multisig to approve a transaction
export MULTISIG_SIGNATURE_THRESHOLD=2
#  Allow parallel execution of trusted setup and circuit deployment
export PARALLEL_SETUP=false

# Contracts

# Sanctions contract is pointing to
#   to Chainalysis oracle for sanction screening to prevent sanctioned ethereum
#   addresses to use nightfall
#   https://go.chainalysis.com/chainalysis-oracle-docs.html
# to disable sanctions, set below to true. Else, leave unassiged
export DEPLOY_MOCKED_SANCTIONS_CONTRACT=true

# Token Restrictions
export RESTRICT_TOKENS=disable

# Configure token deposit and withdraw restrictions. If -1, token restrictions are disabled. 
export WETH_RESTRICT=-1
export ERC20MOCK_RESTRICT=-1
export MATIC_RESTRICT=-1
export USDC_RESTRICT=-1
export DAI_RESTRICT=-1

# Publisher
export PUBLISHER_ENABLE=false

# Check for new blocks period
export PUBLISHER_POLLING_INTERVAL_SECONDS=10
# time window when new blocks are detected
export PUBLISHER_MAX_WATCH_SECONDS=300

export PUBLISHER_PORT=8080
export PUBLISHER_SERVICE=publisher
export PUBLISHER_HOST=${PUBLISHER_SERVICE}.${DOMAIN_NAME}
export PUBLISHER_SERVICE_ALB='internal'

# Wallet
export WALLET_SERVICE=wallet
export WALLET_HOST=${WALLET_SERVICE}.${DOMAIN_NAME}
export WALLET_SERVICE_ALB='route-53'
export WALLET_ENABLE=false

# DYNAMODB

# To disable autoscaling and set fix capacity, set min equal to max
export AUTOSCALING_MIN_READ_CAPACITY=10
export AUTOSCALING_MAX_READ_CAPACITY=500
export AUTOSCALING_MIN_WRITE_CAPACITY=1
export AUTOSCALING_MAX_WRITE_CAPACITY=200

# Dashboard
# Enable Dashboard service
export DASHBOARD_ENABLE=true
# Enable SLACK alarms. SLAC_TOKEN must be correctly configured
export BROADCAST_ALARM=false
# Period to check alams

export DASHBOARD_POLLING_INTERVAL_SECONDS=900
export DASHBOARD_PORT=8080
export DASHBOARD_SERVICE=dashboard
export DASHBOARD_HOST=${DASHBOARD_SERVICE}.${DOMAIN_NAME}
export DASHBOARD_SERVICE_ALB='internal'
# Comma separated clusters
# export DASHBOARD_CLUSTERS="cluster1,cluster2"
export DASHBOARD_CLUSTERS=

# Configure individual services check alarm period
export FARGATE_CHECK_PERIOD_MIN=15
export BLOCKCHAIN_CHECK_PERIOD_MIN=300
export DOCDB_CHECK_PERIOD_MIN=15
export EFS_CHECK_PERIOD_MIN=15
if [ "${PUBLISHER_ENABLE}" = "true" ]; then
  export PUBLISHER_STATS_CHECK_PERIOD_MIN=15
  export DYNAMODB_CHECK_PERIOD_MIN=15
else  
  export PUBLISHER_STATS_CHECK_PERIOD_MIN=0
  export DYNAMODB_CHECK_PERIOD_MIN=0
fi  
export AWS_CLOWDWATCH_METRIC_PERIOD_MINUTES=15
export OPTIMIST_STATS_CHECK_PERIOD_MIN=15

### ALARMS
# Alarm configuration
export FARGATE_STATUS_COUNT_ALARM=2
export EFS_STATUS_COUNT_ALARM=2
export BLOCKCHAIN_BALANCE_COUNT_ALARM=2
export PROPOSER_BALANCE_THRESHOLD=1
export CHALLENGER_BALANCE_THRESHOLD=0
export DOCDB_PENDINGTX_COUNT_ALARM=2
export DOCDB_PENDINGBLOCK_COUNT_ALARM=2
export DOCDB_STATUS_COUNT_ALARM=2
export DYNAMODB_DATASTATUS_COUNT_ALARM=2
export DYNAMODB_WSSTATUS_COUNT_ALARM=100
export DYNAMODB_WS_COUNT_ALARM=2
export DYNAMODB_NBLOCKS_COUNT_ALARM=2
export PUBLISHER_STATS_STATUS_COUNT_ALARM=2
export OPTIMIST_STATS_STATUS_COUNT_ALARM=2

# Challenger

# Number of challengers
export CHALLENGER_N=1

export CHALLENGER_PORT=8080
export CHALLENGER_SERVICE=challenger
export CHALLENGER_HOST=${CHALLENGER_SERVICE}.${DOMAIN_NAME}
export CHALLENGER_SERVICE_ALB='internal'
export CHALLENGER_LOG_LEVEL=debug
export CHALLENGER_LOG_HTTP_PAYLOAD_ENABLED='true'
export CHALLENGER_LOG_HTTP_FULL_DATA='false'

# Enables ability to turn on and off challengers. This functionality is only
#  thought for testing. For production environments, it should be left empty.
#  To enable turning on/off challengers, only random mode is supported. So, 
#    set CHALLENGER_DOWNTIME_AT=random
export CHALLENGER_DOWNTIME_AT=

#  Random downtime enables to configure challenger downtime per hour.
#    CHALLENGER_DOWNTIME_LENGTH_MINUTES sets the number of minutes in an hour
#      the challenger will be unavailable. The reference time is random.
export CHALLENGER_DOWNTIME_LENGTH_MINUTES=10

# WAF rules

# Web Application Firewall Configuration
export WAF_RULE_IP_REPUTATION_LIST_ENABLE=false
export WAF_RULE_COMMON_RULSET_ENABLE=false
export WAF_RULE_SQL_INJECTION_ENABLE=false
export WAF_RULE_PHP_ENABLE=false
export WAF_RULE_LOCAL_FILE_INJECTION_ENABLE=false
export WAF_RULE_RATE_LIMIT_ENABLE=false


###### Typical parameters to configure

# Deployer 
export DEPLOY_MOCK_TOKENS=true
export CHALLENGE_PERIOD_AMOUNT=90
export CHALLENGE_PERIOD_UNIT=seconds
export ALWAYS_DO_TRUSTED_SETUP=true
export WHITELISTING=disable
export PERFORMANCE_BENCHMARK_ENABLE=true

# DEPLOYER_ETH_NETWORK: staging, goerli, staging_edge or mainnet
export DEPLOYER_ETH_NETWORK=staging

if [[ "${DEPLOYER_ETH_NETWORK}" == "staging"* ]]; then
  export TEST_ERC20_ADDRESS=0x4315287906f3FCF2345Ad1bfE0f682457b041Fa7
  export DEPLOYER_ADDRESS=0x9C8B2276D490141Ae1440Da660E470E7C0349C63
  export _DEPLOYER_ADDRESS=0x9C8B2276D490141Ae1440Da660E470E7C0349C63
  export MULTISIG_APPROVERS='0x9C8B2276D490141Ae1440Da660E470E7C0349C63,0xfeEDA3882Dd44aeb394caEEf941386E7ed88e0E0,0xfCb059A4dB5B961d3e48706fAC91a55Bad0035C9,0x4789FD18D5d71982045d85d5218493fD69F55AC4'

  # Proposer
  export BOOT_PROPOSER_ADDRESS=0xfeEDA3882Dd44aeb394caEEf941386E7ed88e0E0

  # Proposer2
  export PROPOSER2_ADDRESS=0xa12D5C4921518980c57Ce3fFe275593e4BAB9211

  # Proposer3
  export PROPOSER3_ADDRESS=0xdb080dC48961bC1D67a0A4151572eCb824cC76E8
  
  # Challenger
  export BOOT_CHALLENGER_ADDRESS=0xFFF578cDdc48792522F4a7Fdc3973Ec0d41A831f
  
  # Liquidity Provider
  export LIQUIDITY_PROVIDER_ADDRESS=0x4789FD18D5d71982045d85d5218493fD69F55AC4
  
  # Regulator1
  export REGULATOR_ZKP_PUBLIC_KEY=0xae979c4ee2e9d36dfc257396f71059e1c1bb76d37fcf3b61dc03b553db2de562

  # Regulator2
  export REGULATOR2_ZKP_PUBLIC_KEY=0xa62a10403c7cc5173b4ce7b237dc0f6d0221b76d96faed422f97b6557c425d86
  
  # Users
  export USER1_ADDRESS=0x316f2ee26956d28557ecbc28dce649eed39623b1
  export USER1_COMPRESSED_ZKP_PUBLIC_KEY=0x80d5ed4c6c7a9dff2f5e38533c0673e252d0e761a621fb01d75040da65a54a4a
  export USER2_ADDRESS=0xcb4694ce55b666675a50bdcd7eced9a1b6776b08
  export USER2_COMPRESSED_ZKP_PUBLIC_KEY=0x1ddf24a69680d5cd979cbb958d508e7fbc80c1f66fbeda2c628fe8cc7098856e

  export ERC20_TOKEN_ADDRESS_LIST="0x00269D82110435A4E7043D53E5bF79a8bd767b17"
  export ERC20_TOKEN_NAME_LIST="Erc20Mock"
  export BLOCKCHAIN_CONFIRMATIONS=1

  if [ "${DEPLOYER_ETH_NETWORK}" = "staging_edge" ]; then
    export BLOCKCHAIN_PORT=40002
    export BLOCKCHAIN_PATH='/ws'
    export FEE_L2_TOKEN_ID='ERC20Mock'
  else
    export BLOCKCHAIN_PATH=''
    export DEPLOYER_ADDRESS=
  fi

  
else
  ## These variables need to be configured in environment configuration file
  export TEST_ERC20_ADDRESS=
  export DEPLOYER_ADDRESS=
  export _DEPLOYER_ADDRESS=${DEPLOYER_ADDRESS}
  export MULTISIG_APPROVERS='0x1,0x2,0x3,0x4'

  # Proposer
  export BOOT_PROPOSER_ADDRESS=
  
  # Challenger
  export BOOT_CHALLENGER_ADDRESS=
  
  # Liquidity Provider
  export LIQUIDITY_PROVIDER_ADDRESS=
  
  # Users
  export USER1_ADDRESS=
  export USER1_COMPRESSED_ZKP_PUBLIC_KEY=
  export USER2_ADDRESS=
  export USER2_COMPRESSED_ZKP_PUBLIC_KEY=

  export ERC20_TOKEN_ADDRESS_LIST=
  export ERC20_TOKEN_NAME_LIST=

  export CHALLENGE_PERIOD_AMOUNT=1
  export CHALLENGE_PERIOD_UNIT=weeks
  export ALWAYS_DO_TRUSTED_SETUP=
  export WHITELISTING='enable'

  if [ "${DEPLOYER_ETH_NETWORK}" = "mainnet" ]; then
    export ERC20_TOKEN_NAME_LIST="WETH,MATIC,USDC,USDT,DAI"
    export ERC20_TOKEN_ADDRESS_LIST="0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2,0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0,0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48,0xdAC17F958D2ee523a2206206994597C13D831ec7,0x6B175474E89094C44Da98b954EedeAC495271d0F",
    # Web3
    export GAS_DEPLOYER=12000000
    export GAS_USER=4000000
    export GAS_PROPOSER=7000000
    export GAS_PRICE='200000000000'
    export GAS_MULTIPLIER=1.2
    export USE_AWS_PRIVATE_KEY=
    export DEPLOY_MOCK_TOKENS=false
    export TEST_ERC20_ADDRESS=0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0
    export STATE_GENESIS_BLOCK=

    export DEPLOY_MOCKED_SANCTIONS_CONTRACT=false
  fi

fi
